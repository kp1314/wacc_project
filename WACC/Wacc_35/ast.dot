digraph ast{
  func0 [shape=tripleoctagon,label="f_printTree"];
  func1 [shape=tripleoctagon,label="f_createNewNode"];
  func2 [shape=tripleoctagon,label="f_insert"];
  func3 [shape=tripleoctagon,label="main"];
  0 [shape=box,label="<SCOPE>"];
  func0 -> 0;
  1 [shape=box,label="<IF/ELSE>"];
  0 -> 1;
  intermediate0 [shape=trapezium,label="Conditional"];
  1 -> intermediate0;
  2 [label="EQUALS"];
  intermediate0 -> 2;
  intermediate1 [shape=trapezium,label="True"];
  1 -> intermediate1;
  3 [shape=box,label="<SCOPE>"];
  intermediate1 -> 3;
  intermediate2 [shape=trapezium,label="False"];
  1 -> intermediate2;
  4 [shape=box,label="<SCOPE>"];
  intermediate2 -> 4;
  5 [label="root"];
  2 -> 5;
  6 [label="<NULL>"];
  2 -> 6;
  7 [shape=box,label="<RETURN>"];
  3 -> 7;
  8 [label="0"];
  7 -> 8;
  9 [shape=box,label="<SEQUENCE>"];
  4 -> 9;
  10 [shape=box,label="<ASSIGNMENT>"];
  9 -> 10;
  11 [shape=box,label="<ASSIGNMENT>"];
  9 -> 11;
  12 [shape=box,label="<ASSIGNMENT>"];
  9 -> 12;
  13 [shape=box,label="<ASSIGNMENT>"];
  9 -> 13;
  14 [shape=box,label="<PRINT>"];
  9 -> 14;
  15 [shape=box,label="<PRINT>"];
  9 -> 15;
  16 [shape=box,label="<ASSIGNMENT>"];
  9 -> 16;
  17 [shape=box,label="<ASSIGNMENT>"];
  9 -> 17;
  18 [shape=box,label="<RETURN>"];
  9 -> 18;
  19 [label="body"];
  10 -> 19;
  20 [label="snd root"];
  10 -> 20;
  21 [label="p"];
  11 -> 21;
  22 [label="fst body"];
  11 -> 22;
  23 [label="temp"];
  12 -> 23;
  24 [label="<CALL f_printTree (p)>"];
  12 -> 24;
  25 [label="p"];
  24 -> 25;
  26 [label="temp"];
  13 -> 26;
  27 [label="fst root"];
  13 -> 27;
  28 [label="temp"];
  14 -> 28;
  29 [label="' '"];
  15 -> 29;
  30 [label="p"];
  16 -> 30;
  31 [label="snd body"];
  16 -> 31;
  32 [label="temp"];
  17 -> 32;
  33 [label="<CALL f_printTree (p)>"];
  17 -> 33;
  34 [label="p"];
  33 -> 34;
  35 [label="0"];
  18 -> 35;
  36 [shape=box,label="<SCOPE>"];
  func1 -> 36;
  37 [shape=box,label="<SEQUENCE>"];
  36 -> 37;
  38 [shape=box,label="<ASSIGNMENT>"];
  37 -> 38;
  39 [shape=box,label="<ASSIGNMENT>"];
  37 -> 39;
  40 [shape=box,label="<RETURN>"];
  37 -> 40;
  41 [label="p"];
  38 -> 41;
  42 [label="newpair"];
  38 -> 42;
  43 [label="left"];
  42 -> 43;
  44 [label="right"];
  42 -> 44;
  45 [label="q"];
  39 -> 45;
  46 [label="newpair"];
  39 -> 46;
  47 [label="value"];
  46 -> 47;
  48 [label="p"];
  46 -> 48;
  49 [label="q"];
  40 -> 49;
  50 [shape=box,label="<SCOPE>"];
  func2 -> 50;
  51 [shape=box,label="<SEQUENCE>"];
  50 -> 51;
  52 [shape=box,label="<IF/ELSE>"];
  51 -> 52;
  53 [shape=box,label="<RETURN>"];
  51 -> 53;
  intermediate3 [shape=trapezium,label="Conditional"];
  52 -> intermediate3;
  54 [label="EQUALS"];
  intermediate3 -> 54;
  intermediate4 [shape=trapezium,label="True"];
  52 -> intermediate4;
  55 [shape=box,label="<SCOPE>"];
  intermediate4 -> 55;
  intermediate5 [shape=trapezium,label="False"];
  52 -> intermediate5;
  56 [shape=box,label="<SCOPE>"];
  intermediate5 -> 56;
  57 [label="root"];
  54 -> 57;
  58 [label="<NULL>"];
  54 -> 58;
  59 [shape=box,label="<ASSIGNMENT>"];
  55 -> 59;
  60 [label="root"];
  59 -> 60;
  61 [label="<CALL f_createNewNode (n,<NULL>,<NULL>)>"];
  59 -> 61;
  62 [label="n"];
  61 -> 62;
  63 [label="<NULL>"];
  61 -> 63;
  64 [label="<NULL>"];
  61 -> 64;
  65 [shape=box,label="<SEQUENCE>"];
  56 -> 65;
  66 [shape=box,label="<ASSIGNMENT>"];
  65 -> 66;
  67 [shape=box,label="<ASSIGNMENT>"];
  65 -> 67;
  68 [shape=box,label="<ASSIGNMENT>"];
  65 -> 68;
  69 [shape=box,label="<IF/ELSE>"];
  65 -> 69;
  70 [label="p"];
  66 -> 70;
  71 [label="snd root"];
  66 -> 71;
  72 [label="current"];
  67 -> 72;
  73 [label="fst root"];
  67 -> 73;
  74 [label="q"];
  68 -> 74;
  75 [label="<NULL>"];
  68 -> 75;
  intermediate6 [shape=trapezium,label="Conditional"];
  69 -> intermediate6;
  76 [label="LESS"];
  intermediate6 -> 76;
  intermediate7 [shape=trapezium,label="True"];
  69 -> intermediate7;
  77 [shape=box,label="<SCOPE>"];
  intermediate7 -> 77;
  intermediate8 [shape=trapezium,label="False"];
  69 -> intermediate8;
  78 [shape=box,label="<SCOPE>"];
  intermediate8 -> 78;
  79 [label="n"];
  76 -> 79;
  80 [label="current"];
  76 -> 80;
  81 [shape=box,label="<SEQUENCE>"];
  77 -> 81;
  82 [shape=box,label="<ASSIGNMENT>"];
  81 -> 82;
  83 [shape=box,label="<ASSIGNMENT>"];
  81 -> 83;
  84 [label="q"];
  82 -> 84;
  85 [label="fst p"];
  82 -> 85;
  86 [label="fst p"];
  83 -> 86;
  87 [label="<CALL f_insert (q,n)>"];
  83 -> 87;
  88 [label="q"];
  87 -> 88;
  89 [label="n"];
  87 -> 89;
  90 [shape=box,label="<SEQUENCE>"];
  78 -> 90;
  91 [shape=box,label="<ASSIGNMENT>"];
  90 -> 91;
  92 [shape=box,label="<ASSIGNMENT>"];
  90 -> 92;
  93 [label="q"];
  91 -> 93;
  94 [label="snd p"];
  91 -> 94;
  95 [label="snd p"];
  92 -> 95;
  96 [label="<CALL f_insert (q,n)>"];
  92 -> 96;
  97 [label="q"];
  96 -> 97;
  98 [label="n"];
  96 -> 98;
  99 [label="root"];
  53 -> 99;
  100 [shape=box,label="<SCOPE>"];
  func3 -> 100;
  101 [shape=box,label="<SEQUENCE>"];
  100 -> 101;
  102 [shape=box,label="<ASSIGNMENT>"];
  101 -> 102;
  103 [shape=box,label="<PRINT>"];
  101 -> 103;
  104 [shape=box,label="read "];
  101 -> 104;
  105 [shape=box,label="<PRINT>"];
  101 -> 105;
  106 [shape=box,label="<PRINT>"];
  101 -> 106;
  107 [shape=box,label="<PRINTLN>"];
  101 -> 107;
  108 [shape=box,label="<ASSIGNMENT>"];
  101 -> 108;
  109 [shape=box,label="<ASSIGNMENT>"];
  101 -> 109;
  110 [shape=box,label="<WHILE>"];
  101 -> 110;
  111 [shape=box,label="<PRINT>"];
  101 -> 111;
  112 [shape=box,label="<ASSIGNMENT>"];
  101 -> 112;
  113 [shape=box,label="<PRINTLN>"];
  101 -> 113;
  114 [shape=box,label="<RETURN>"];
  101 -> 114;
  115 [label="n"];
  102 -> 115;
  116 [label="0"];
  102 -> 116;
  117 [label="Please enter the number of integers to insert: "];
  103 -> 117;
  118 [label="n"];
  104 -> 118;
  119 [label="There are "];
  105 -> 119;
  120 [label="n"];
  106 -> 120;
  121 [label=" integers."];
  107 -> 121;
  122 [label="i"];
  108 -> 122;
  123 [label="0"];
  108 -> 123;
  124 [label="root"];
  109 -> 124;
  125 [label="<NULL>"];
  109 -> 125;
  intermediate9 [shape=trapezium,label="Conditional"];
  110 -> intermediate9;
  126 [label="LESS"];
  intermediate9 -> 126;
  intermediate10 [shape=trapezium,label="Body"];
  110 -> intermediate10;
  127 [shape=box,label="<SCOPE>"];
  intermediate10 -> 127;
  128 [label="i"];
  126 -> 128;
  129 [label="n"];
  126 -> 129;
  130 [shape=box,label="<SEQUENCE>"];
  127 -> 130;
  131 [shape=box,label="<ASSIGNMENT>"];
  130 -> 131;
  132 [shape=box,label="<PRINT>"];
  130 -> 132;
  133 [shape=box,label="<PRINT>"];
  130 -> 133;
  134 [shape=box,label="<PRINT>"];
  130 -> 134;
  135 [shape=box,label="read "];
  130 -> 135;
  136 [shape=box,label="<ASSIGNMENT>"];
  130 -> 136;
  137 [shape=box,label="<ASSIGNMENT>"];
  130 -> 137;
  138 [label="x"];
  131 -> 138;
  139 [label="0"];
  131 -> 139;
  140 [label="Please enter the number at position "];
  132 -> 140;
  141 [label="PLUS"];
  133 -> 141;
  142 [label="i"];
  141 -> 142;
  143 [label="1"];
  141 -> 143;
  144 [label=" : "];
  134 -> 144;
  145 [label="x"];
  135 -> 145;
  146 [label="root"];
  136 -> 146;
  147 [label="<CALL f_insert (root,x)>"];
  136 -> 147;
  148 [label="root"];
  147 -> 148;
  149 [label="x"];
  147 -> 149;
  150 [label="i"];
  137 -> 150;
  151 [label="PLUS"];
  137 -> 151;
  152 [label="i"];
  151 -> 152;
  153 [label="1"];
  151 -> 153;
  154 [label="Here are the numbers sorted: "];
  111 -> 154;
  155 [label="i"];
  112 -> 155;
  156 [label="<CALL f_printTree (root)>"];
  112 -> 156;
  157 [label="root"];
  156 -> 157;
  158 [label=""];
  113 -> 158;
  159 [label="0"];
  114 -> 159;
}